version: '3.8'
services:

  backend:
    build:
      context: backend
      target: ${ENV}
      args:
        - POSTGRES_HOST
        - POSTGRES_PORT
        - POSTGRES_USERNAME
        - POSTGRES_PASSWORD
        - POSTGRES_NAME
        - JWT_SECRET
        - DATABASE_URL
        - NEW_RELIC_LICENSE_KEY
        - NEW_RELIC_APP_NAME
    restart: always
    container_name: backend
    ports:
      - 3000:3000
      - 3001:3001
      - 5555:5555
    volumes:
      - "./${ENVPATH}/backend/:/app"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:3000/ || exit 1" ]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 20

  db:
    image: postgres:15.3
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_NAME=${POSTGRES_NAME}
    restart: always
    user: postgres
    container_name: db
    env_file:
      - .env
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - 5432
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: frontend
      target: ${ENV}
    restart: always
    container_name: frontend
    ports:
      - 8000:8000
    volumes:
      - "./frontend/:/app"
      - "../build/frontend/:/build"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/" ]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  db_data:
