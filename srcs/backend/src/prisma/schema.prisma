generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
}

model Game {
  id         Int       @id(map: "PK_352a30652cd352f552fef73dec5") @default(autoincrement())
  finish     Boolean   @default(false)
  start_date DateTime  @default(now()) @db.Timestamp(6)
  end_date   DateTime? @db.Timestamp(6)
  score      String?   @db.VarChar
  players    Player[]
}

enum Result {
  WIN
  LOSE
  DRAW
}

model Player {
  id     Int    @id(map: "PK_b5c4d0f9ae826735c474b188ef5") @default(autoincrement())
  win    Result @default(DRAW)
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_7e5bcb1cfcc8a1ab3aa757c5fff")
  gameId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_4097abc6b24629e7c497802e50b")
  userId Int
}

model GameSettings {
  id             Int     @id(map: "PK_7913689ead642c66760cf2bf2b9") @default(autoincrement())
  ball           Int     @default(0)
  paddleColor    String  @default("#fff")
  graphicEffects Boolean @default(false)
  mapColor       Int     @default(0)
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_1371e64d4796f781184c3e79124")
  userId         Int     @unique()
}

model User {
  id              Int             @id(map: "PK_758b8ce7c18b9d347461b30228d") @unique @default(autoincrement())
  status          OnlineStatus    @default(ONLINE)
  username        String          @unique @db.VarChar // @autoincrement?
  email           String          @unique(sort: Asc) @db.VarChar
  firstConnexion  String          @default("true")
  hashPassword    String?         @db.VarChar // To hashPassword
  u2fHash         String?         @db.VarChar
  otpHash         String?         @db.VarChar // try removing all the db.VarChar
  activated2FA    Boolean         @default(false)
  avatar          String?
  avatar42        String?
  bio             String          @default("")
  gameSettings    GameSettings?
  achieve         Achievement?
  gameHistory     Player[]
  membership      Member[]
  message         Message[]
  friend          Friendship[]
  sendFriendReq   FriendRequest[] @relation("sendFriendReq")
  recvFriendReq   FriendRequest[] @relation("recvFriendReq")
  block           Block[]         @relation("block")
  blocked         Block[]         @relation("blocked")

  refreshToken RefreshToken[] @relation("refreshToken")
}

enum OnlineStatus {
  ONLINE
  OFFLINE
  INGAME
}

model Achievement {
  id              Int     @id @default(autoincrement())
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int     @unique
  firstWin        Boolean @default(false)
  win10Games      Boolean @default(false)
  win100Games     Boolean @default(false)
  play100Games    Boolean @default(false)
  play1000Games   Boolean @default(false)
}

// latest message first
model Message {
  id        Int      @id(map: "PK_ba01f0a3e0123651915008bc578") @unique(sort: Desc) @default(autoincrement())
  message   String   @db.VarChar
  send_date DateTime @default(now()) @db.Timestamp(6)
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "FK_446251f8ceb2132af01b68eb593")
  userId    Int?
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_fdfe54a21d1542c564384b74d5c")
  roomId    Int
}

model Room {
  id        Int       @id(map: "PK_c6d46db005d623e691b2fbcba23") @default(autoincrement())
  isChannel Boolean
  title     String?   @db.VarChar(255)
  private   Boolean?
  password  String?   @db.VarChar(100)
  message   Message[]
  members   Member[]
}

model Member {
  id     Int       @id(map: "PK_42347ce202629a5cda29ce741e5") @default(autoincrement())
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_88f8befdb79fd0d39d17f6354a6")
  userId Int
  room   Room      @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_b86b11d1abcbbb56a5d6a8ad99e")
  roomId Int
  owner  Boolean   @default(false)
  admin  Boolean   @default(false)
  ban    Boolean   @default(false)
  mute   DateTime?
}

model Friendship {
  id      Int    @id @default(autoincrement())
  friends User[]
}

model FriendRequest {
  id               Int      @id @unique(sort: Desc) @default(autoincrement())
  user             User     @relation("sendFriendReq", fields: [userId], references: [id], onDelete: Cascade)
  userId           Int
  possibleFriend   User     @relation("recvFriendReq", fields: [possibleFriendId], references: [id], onDelete: Cascade)
  possibleFriendId Int
  status           ReqState @default(PENDING)
}

enum ReqState {
  PENDING
  ACCEPT
  DECLINE
}

model Block {
  id        Int  @id @default(autoincrement())
  user      User @relation("block", fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  blocked   User @relation("blocked", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId Int
}

model RefreshToken {
  id    Int    @id @default(autoincrement())
  token String @unique

  // This field is the scalar that will store the foreign key
  userId Int

  // This field is the relation field that lets you fetch the actual User object. 
  // The fields and references arguments define how the relationship is mapped.
  user User @relation("refreshToken", fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  expiresAt DateTime
}
