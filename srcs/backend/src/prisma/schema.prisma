generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// to be discussed: I think fields 'finish' and 'start_date' can be deleted
model Game {
  id         BigInt       @default(autoincrement()) @id(map: "PK_352a30652cd352f552fef73dec5")
  finish     Boolean      @default(false)
  start_date DateTime     @db.Timestamp(6)
  end_date   DateTime?    @default(now()) @db.Timestamp(6)
  score      String?      @db.VarChar
  players    Player[]
}

model Player {
  id     BigInt      @default(autoincrement()) @id(map: "PK_b5c4d0f9ae826735c474b188ef5")
  win    Boolean
  game   Game        @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_7e5bcb1cfcc8a1ab3aa757c5fff")
  gameId BigInt
  user   User?       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_4097abc6b24629e7c497802e50b")
  userId BigInt?
}

model Custom {
  id     BigInt    @id(map: "PK_7913689ead642c66760cf2bf2b9") @default(autoincrement())
  ball   Int       @default(0)
  padel  Int       @default(0)
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_1371e64d4796f781184c3e79124")
  userId BigInt    @unique()
}

model User {
  id               BigInt          @default(autoincrement()) @id(map: "PK_758b8ce7c18b9d347461b30228d")
  status           OnlineStatus    @default(ONLINE)
  username         String          @db.VarChar @unique(sort: Asc)
  email            String          @db.VarChar  // @default("") 
  password         String          @db.VarChar
  u2fHash          String?         @db.VarChar
  otpHash          String?         @db.VarChar
  activated2FA     Boolean         @default(false)
  avatar           Bytes?
  bio              String          @default("Nothing written yet ...")
  custom           Custom?
  achieve          Achievement?
  gameHistory      Player[]
  membership       Member[] 
  message          Message[]
  friend           Friendship[]
  sendFriendReq    FriendRequest[] @relation("sendFriendReq")
  recvFriendReq    FriendRequest[] @relation("recvFriendReq")
  block            Block[]         @relation("block")
  blocked          Block[]         @relation("blocked")
}

enum OnlineStatus {
	ONLINE
	OFFLINE
	INGAME
}

model Achievement {
  id            BigInt  @id @default(autoincrement())
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        BigInt  @unique
  firstWin      Boolean @default(false)
  win10Games    Boolean @default(false)
  win100Games   Boolean @default(false)
  play100Games  Boolean @default(false)
  play1000Games Boolean @default(false)
}

// latest message first
model Message {
  id        BigInt   @default(autoincrement()) @unique(sort: Desc) @id(map: "PK_ba01f0a3e0123651915008bc578")
  message   String   @db.VarChar
  send_date DateTime @db.Timestamp(6) @default(now())
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "FK_446251f8ceb2132af01b68eb593")
  userId    BigInt? 
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_fdfe54a21d1542c564384b74d5c")
  roomId    BigInt 
}

model Room {
  id        BigInt    @default(autoincrement()) @id(map: "PK_c6d46db005d623e691b2fbcba23") 
  isChannel Boolean
  title     String?   @db.VarChar(255) @unique()
  private   Boolean?  
  password  String?   @db.VarChar(100)
  message   Message[]
  members   Member[]
}

model Member {
  id     BigInt    @default(autoincrement()) @id(map: "PK_42347ce202629a5cda29ce741e5")
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_88f8befdb79fd0d39d17f6354a6")
  userId BigInt
  room   Room      @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_b86b11d1abcbbb56a5d6a8ad99e")
  roomId BigInt
  owner  Boolean   @default(false)
  admin  Boolean   @default(false)
  ban    Boolean   @default(false)
  mute   DateTime?
}

model Friendship {
  id      BigInt @id @default(autoincrement())
  friends User[]
}

model FriendRequest {
  id               BigInt @id @default(autoincrement()) @unique(sort: Desc)
  user             User   @relation("sendFriendReq", fields: [userId], references: [id], onDelete: Cascade)
  userId           BigInt
  possibleFriend   User   @relation("recvFriendReq", fields: [possibleFriendId], references: [id], onDelete: Cascade)
  possibleFriendId BigInt
  status           ReqState @default(PENDING)
}

enum ReqState {
	PENDING
	ACCEPT
	DECLINE
}

model Block {
  id        BigInt @id @default(autoincrement())
  user      User   @relation("block", fields: [userId], references: [id], onDelete: Cascade)
  userId    BigInt
  blocked   User   @relation("blocked", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId BigInt
}
