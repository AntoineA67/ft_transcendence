generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
    provider = "node ../node_modules/prisma-nestjs-graphql"
    output = "./@generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model game {
  id             Int              @id(map: "PK_352a30652cd352f552fef73dec5") @default(autoincrement())
  status         Boolean          @default(false)
  start_date     DateTime         @db.Timestamp(6)
  end_date       DateTime?        @db.Timestamp(6)
  score          String?          @db.VarChar
  winnerId       BigInt?
  user           user?            @relation(fields: [winnerId], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_cd57acb58d1147c23da5cd09cae")
  game_user_link game_user_link[]
}

model message {
  id        Int      @id(map: "PK_ba01f0a3e0123651915008bc578") @default(autoincrement())
  message   String   @db.VarChar
  send_date DateTime @db.Timestamp(6)
  roomId    Int?
  userId    BigInt?
  user      user?    @relation(fields: [userId], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_446251f8ceb2132af01b68eb593")
  room      room?    @relation(fields: [roomId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_fdfe54a21d1542c564384b74d5c")
}

model user {
  user_id                                                   BigInt                 @id(map: "PK_758b8ce7c18b9d347461b30228d") @default(autoincrement())
  username                                                  String                 @default("") @db.VarChar
  email_address                                             String                 @default("") @db.VarChar
  password                                                  String                 @default("") @db.VarChar
  bio                                                       String                 @default("") @db.VarChar
  custom                                                    custom[]
  game                                                      game[]
  game_user_link                                            game_user_link[]
  message                                                   message[]
  room                                                      room[]
  room_user_link                                            room_user_link[]
  user_friendship_link_user_friendship_link_friend_idTouser user_friendship_link[] @relation("user_friendship_link_friend_idTouser")
  user_friendship_link_user_friendship_link_user_idTouser   user_friendship_link[] @relation("user_friendship_link_user_idTouser")
}

model custom {
  id     Int     @id(map: "PK_7913689ead642c66760cf2bf2b9") @default(autoincrement())
  ball   Int?
  puck   Int?
  userId BigInt?
  user   user?   @relation(fields: [userId], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_1371e64d4796f781184c3e79124")
}

model game_user_link {
  id     Int     @id(map: "PK_b5c4d0f9ae826735c474b188ef5") @default(autoincrement())
  status Boolean @default(true)
  gameId Int?
  userId BigInt?
  user   user?   @relation(fields: [userId], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "FK_4097abc6b24629e7c497802e50b")
  game   game?   @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_7e5bcb1cfcc8a1ab3aa757c5fff")
}

model room {
  id             Int              @id(map: "PK_c6d46db005d623e691b2fbcba23") @default(autoincrement())
  title          String           @db.VarChar(255)
  private        Boolean
  password       String?          @db.VarChar(100)
  ownerId        BigInt?
  message        message[]
  user           user?            @relation(fields: [ownerId], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "FK_65283be59094a73fed31ffeee4e")
  room_user_link room_user_link[]
}

model room_user_link {
  id          Int     @id(map: "PK_42347ce202629a5cda29ce741e5") @default(autoincrement())
  ownerStatus Boolean @default(false)
  adminStatus Boolean @default(false)
  banStatus   Boolean @default(false)
  muteStatus  Boolean @default(false)
  roomId      Int?
  userId      BigInt?
  user        user?   @relation(fields: [userId], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "FK_88f8befdb79fd0d39d17f6354a6")
  room        room?   @relation(fields: [roomId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_b86b11d1abcbbb56a5d6a8ad99e")
}

model user_friendship_link {
  id                                        Int     @id(map: "PK_a331d7dca75fc3d7fc1ced56c8d") @default(autoincrement())
  friendStatus                              Boolean @default(false)
  blockedStatus                             Boolean @default(false)
  user_id                                   BigInt?
  friend_id                                 BigInt?
  user_user_friendship_link_friend_idTouser user?   @relation("user_friendship_link_friend_idTouser", fields: [friend_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "FK_7af4fef2416f97e3984d8cefd59")
  user_user_friendship_link_user_idTouser   user?   @relation("user_friendship_link_user_idTouser", fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "FK_9897101c71227987bc6b68aa32d")
}
